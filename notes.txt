PLAYWRIGHT AS A PLAY
====================================================================

THOUGHTS
====================================================================
 - A play should have it's own services
 - A play should have it's own Gemfile
 - This means `playwright g service` needs args like so:
    `playwright g service [play_name] [service_name] [url] [actions]`
 - Playwright itself will also be a play. This way, I'm forced to organize
    playwright as a play so that I have to test play functionality while I build
    basic commands. This also forces me to reorganize my requires in a more
    effective and efficient manner.
 - I need to update my .generated_commands.sh as well and how that gets
    generated. Essentially, instead of just running the ruby file, I'd like to
    read config.json to get the class's name. Then in a `ruby -e` command, I
    want to require the class and run the method. This way, anything can be
    required and used elsewhere (besides playwright dependencies) without
    running the command right away.


FILE STRUCTURE (INSTALLED)
====================================================================
playwright
  |- .src
  |   |- .gitignore
  |   |- .version
  |   |- Gemfile
  |   |- Gemfile.lock
  |   |- README.md
  |   |- installer.sh
  |   |- lib
  |   |   |- play
  |   |   |   |- arguments.rb
  |   |   |   |- params.rb
  |   |   |   |- play_utils.rb (formerly utils.rb)
  |   |   |   |- variables.rb
  |   |   |- play.rb
  |   |   |- playwright_utils
  |   |   |   |- file_builder.rb
  |   |   |- templates
  |   |   |   |- abstract_service.rb.sample
  |   |   |   |- play.rb.sample
  |   |- notes.txt
  |   |- playwright.sh
  |- plays
  |   |- playwright_play
  |   |   |- Gemfile
  |   |   |- Gemfile.lock
  |   |   |- lib
  |   |   |   |- apply.rb
  |   |   |   |- edit.rb
  |   |   |   |- generate.rb
  |   |   |   |- get.rb
  |   |   |   |- list.rb
  |   |   |   |- rm.rb
  |   |   |   |- uninstall.rb
  |   |   |   |- update.rb
  |   |   |- playwright.rb (formerly commands.rb)
  |   |- my_play
  |   |   |- my_play.rb
  |   |   |- lib
  |   |   |   |- my_play_subclass.rb
  |   |   |- Gemfile
  |   |   |- Gemfile.lock
  |   |- my_play_with_service
  |   |   |- my_play_with_service.rb
  |   |   |- lib
  |   |   |   |- my_subclass.rb
  |   |   |   |- services
  |   |   |   |   |- service_class.rb
  |   |   |- Gemfile
  |   |   |- Gemfile.lock
  |- shell
  |   |- .generated_commands.sh
  |   |- user_commands.sh
  
FILE STRUCTURE (NOT INSTALLED)
====================================================================
playwright
  |- Gemfile
  |- Gemfile.lock
  |- README.md
  |- installer.sh
  |- lib
  |   |- play
  |   |   |- arguments.rb
  |   |   |- params.rb
  |   |   |- play_utils.rb (formerly utils.rb)
  |   |   |- variables.rb
  |   |- play.rb
  |   |- playwright_play
  |   |   |- Gemfile
  |   |   |- Gemfile.lock
  |   |   |- lib
  |   |   |   |- apply.rb
  |   |   |   |- destroy.rb
  |   |   |   |- edit.rb
  |   |   |   |- generate.rb
  |   |   |   |- get.rb
  |   |   |   |- list.rb
  |   |   |   |- rm.rb
  |   |   |   |- uninstall.rb
  |   |   |   |- update.rb
  |   |   |- playwright.rb (formerly commands.rb)
  |   |- playwright_utils
  |   |   |- file_builder.rb
  |   |- templates
  |   |   |- abstract_service.rb.sample
  |   |   |- play.rb.sample
  |- notes.txt
  |- playwright.sh
  |- .gitignore
  |- .version
  
TO IMPLEMENT
====================================================================
  1. Move all files to reflect new structures.
  2. Rewrite installer.sh (for the most part) to reflect new structures.
  3. Organize dependencies.
  4. Reorganize how .generated_commands.sh should look.
  5. Look at utils.rb. The above file structure assumes that play_utils.rb is
      useful to all plays. If it isn't move it out. (Maybe make a utils.rb in
      .src/lib/playwright_utils)
  6. Remove playwright.sh (should be handled by .generated_commands.sh)
  
DOWN THE ROAD PRIORITIES
====================================================================
  1. Add in service generation
  2. Add in handling for gems in plays
  3. Add in terminal display tool
  4. Convert my scripts into plays